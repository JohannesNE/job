rm(equal_sets()
rm(equal_sets)
misc = list(
equal_sets = function(x, y) all(x %in% y) & all(y %in% x),
base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
)
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$equal_packages = function(packages) misc$equal_sets(packages, c(.packages(), misc$base_packages))
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$equal_vars = function(vars) misc$equal_sets(ls(), c(vars, "misc", "importnames__", "wd__"))
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$equal_packages = function(packages) misc$equal_sets(packages, c(.packages(), misc$base_packages))
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$test_vars = function(vars) misc$equal_sets(ls(), c(vars, "misc", "importnames__", "wd__"))
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$test_packages = function(packages) misc$equal_sets(packages, c(.packages(), misc$base_packages))
ls()
rm(return())
rm(returned
)
rm(with_args)
#library(rstudioapi)
a = 123
b = list(a = a, goat = "baah")
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$test_vars = function(vars) misc$equal_sets(ls(), c(vars, "misc", "importnames__", "wd__"))
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$test_packages = function(packages) misc$equal_sets(packages, c(.packages(), misc$base_packages))
job::job(default_result = {
imported_correctly = misc$test_vars(c("a", "b"))#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"))
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$test_vars = function(vars) misc$equal_sets(ls(), c(vars, "misc", "importnames__", "wd__"))
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$test_packages = function(packages) misc$equal_sets(packages, c(.packages(), misc$base_packages))
ls()
job::job(default_result = {
imported_correctly = misc$test_vars(c("a", "b"))#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"))
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
job::job(default_result = {
print(ls())
imported_correctly = misc$test_vars(c("a", "b"))#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"))
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
job::job(default_result = {
print(ls())
print(misc)
imported_correctly = misc$test_vars(c("a", "b"))#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"))
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
misc = list()
misc$equal_sets = function(x, y) all(x %in% y) & all(y %in% x)
misc$test_vars = function(vars, misc) misc$equal_sets(ls(), c(vars, "misc", "importnames__", "wd__"))
misc$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
misc$test_packages = function(packages, misc) misc$equal_sets(packages, c(.packages(), misc$base_packages))
job::job(default_result = {
print(ls())
print(misc)
imported_correctly = misc$test_vars(c("a", "b"), misc)#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
job::job(default_result = {
imported_correctly = misc$test_vars(c("a", "b"), misc)#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
print(.packages())
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
misc$test_packages()
misc$test_packages(c("rstudioapi"), misc)
(.packages())
misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
misc$test_packages = function(packages, misc) misc$equal_sets(.packages(), c(packages, misc$base_packages))
misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
ls()
rm(default_result)
job::job(default_result = {
imported_correctly = misc$test_vars(c("a", "b"), misc)#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
print(.packages())
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
job::job(default_result = {
print(ls())
imported_correctly = misc$test_vars(c("a", "b"), misc)#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
rm(default_result)
ls()
job::job(default_result = {
print(ls())
imported_correctly = misc$test_vars(c("a", "b"), misc)#equal_sets(ls(), c("a", "b", "misc", "importnames__", "wd__"))
attached_correctly = misc$test_packages(c("job", "rstudioapi", "testthat"), misc)
#attached_correctly = misc$equal_sets(.packages(), c("job", "rstudioapi", "testthat", misc$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
expect_true(default_result$imported_a)
expect_true(default_result$imported_b)
expect_true(default_result$attached_rstudioapi)
expect_setequal(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b", "attached_rstudioapi"))
rm(default_result)
rm(expected_names)
#library(rstudioapi)
a = 123
b = list(a = a, goat = "baah")
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$test_vars = function(vars, in_job) {
in_job$equal_sets(ls(), c(vars, "in_job", "importnames__", "wd__"))
}
in_job$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
in_job$test_packages = function(packages, in_job) {
in_job$equal_sets(.packages(), c(packages, in_job$base_packages))
}
rm(misc)
ls(/)
ls()
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$test_vars = function(vars, in_job) {
print(ls())
print(c(vars, "in_job", "importnames__", "wd__"))
in_job$equal_sets(ls(), c(vars, "in_job", "importnames__", "wd__"))
}
in_job$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
in_job$test_packages = function(packages, in_job) {
in_job$equal_sets(.packages(), c(packages, in_job$base_packages))
}
job::job(default_result = {
imported_correctly = in_job$test_vars(c("a", "b"), in_job)
attached_correctly = in_job$test_packages(c("job", "rstudioapi", "testthat"), in_job)
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
in_job$vars = c("in_job", "importnames__", "wd__")
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$vars = c("in_job", "importnames__", "wd__")
in_job$base_packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
job::job(default_result = {
imported_correctly = in_job$equal_sets(ls(), c("a", "b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", "rstudioapi", "testthat", in_job$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
expect_true(default_result$imported_a)
expect_true(default_result$imported_b)
expect_true(default_result$attached_rstudioapi)
expect_setequal(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b", "attached_rstudioapi"))
rm(default_result)
ls()
job::job(default_result = {
print(ls())
print(c("a", "b", in_job$vars))
imported_correctly = in_job$equal_sets(ls(), c("a", "b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", "rstudioapi", "testthat", in_job$base_packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
expect_true(default_result$imported_a)
expect_true(default_result$imported_b)
expect_true(default_result$attached_rstudioapi)
expect_setequal(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b", "attached_rstudioapi"))
rm(default_result)
in_job$packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
returned = job::job(with_args = {
print(ls())
print(.packages())
imported_correctly = in_job$equal_sets(ls(), c("b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", in_job$base_packages))
imported_b = b$a == 123 & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
}, import = c(b, equal_sets), packages = c("job"), title = "something weird: #/(¤")
returned = job::job(with_args = {
print(ls())
print(.packages())
imported_correctly = in_job$equal_sets(ls(), c("b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", in_job$base_packages))
imported_b = b$a == 123 & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
}, import = c(b, in_job), packages = c("job"), title = "something weird: #/(¤")
expect_null(returned)
expect_true(with_args$imported_correctly)
expect_true(with_args$attached_correctly)
expect_true(with_args$imported_b)
expect_true(with_args$attached_rstudioapi == FALSE)
expect_setequal(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b"))
expect_setequal(names(with_args), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b"))
names(with_args)
expect_setequal(names(with_args), c(".call", "attached_correctly", "imported_correctly", "imported_b"))
expect_setequal(names(with_args), c(".call", "attached_correctly", "imported_correctly", "imported_b", "attached_rstudioapi"))
rm(returned)
rm(with_args)
ls()
################
# TEST BLANK #
################
job::job(blank_slate = {
imported_correctly = all(ls() == c("importnames__", "wd__")) & length(ls()) == 2
attached_correctly = all(.packages() == c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")) & length(.packages()) == 7
}, import = NULL, packages = NULL)
expect_true(blank_slate$imported_correctly)
expect_true(blank_slate$attached_correctly)
blank_slate$.call
expect_true(blank_slate$imported_correctly)
expect_true(blank_slate$attached_correctly)
rm(blank_slate)
ls()
attached_start = ls()
job::job({
a = 1
}, import = NULL, packages = NULL)  # for speed
expect_setequal(c(attached_start, "attached_start"), ls())
############
# CLEAN UP #
############
rm(list = c("a", "b", "in_job"))
ls()
rm(attached_start)
ls()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::load_all(".")
environment(a)
a
pryr::where("a")
pryr::where("default_result")
pryr::where("in_job")
pryr::where("job")
pryr::where("rnorm")
devtools::test()
devtools::test()
packageVersion("tinytest")
devtools::load_all(".")
devtools::test()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
tinytest::setup_tinytest()
tinytest::setup_tinytest(".")
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
ls()
ls()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
library(tinytest)
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
?checkEqual
??checkEqual
a
b
tinytest::test_all()
a = 123
b = list(a = a, goat = "baah")
tinytest::test_all()
detach("tinytest", unload = TRUE)
detach("package:tinytest", unload = TRUE)
tinytest::test_all()
detach("package:testthat", unload = TRUE)
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
tinytest::test_all()
devtools::load_all(".")
tinytest::test_all()
library(tinytest)
tinytest::test_all()
install.packages("tinytest")
detach("package:tinytest", unload = TRUE)
install.packages("tinytest")
library(tinytest)
tinytest::test_all()
??checkequals
usethis::use_testthat()
devtools::test()
devtools::load_all(".")
devtools::test()
ls()
library(rstudioapi)
a = 123
b = list(a = a, goat = "baah")
# Helpers to be called inside the jobs
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$vars = c("in_job", "importnames__", "wd__")
in_job$packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
#########################
# TEST DEFAULT BEHAVIOR #
#########################
job::job(default_result = {
imported_correctly = in_job$equal_sets(ls(), c("a", "b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", "rstudioapi", "testthat", in_job$packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
ls()
rm(a)
rm(b)
rm(default_result)
rm(in_job)
library(tinytest)
detach("package:testthat", unload = TRUE)
library(tinytest)
library(rstudioapi)
a = 123
b = list(a = a, goat = "baah")
# Helpers to be called inside the jobs
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$vars = c("in_job", "importnames__", "wd__")
in_job$packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
#########################
# TEST DEFAULT BEHAVIOR #
#########################
job::job(default_result = {
imported_correctly = in_job$equal_sets(ls(), c("a", "b", in_job$vars))
attached_correctly = in_job$equal_sets(.packages(), c("job", "rstudioapi", "testthat", in_job$packages))
imported_a = a == 123
imported_b = b$a == a & b$goat == "baah"
attached_rstudioapi = exists("isAvailable")
})
# Result is not returned immediately
expect_true(exists("default_result") == FALSE)
# Check result
Sys.sleep(10)
expect_true(default_result$imported_correctly)
expect_true(default_result$attached_correctly)
expect_true(default_result$imported_a)
expect_true(default_result$imported_b)
expect_true(default_result$attached_rstudioapi)
expect_setequal(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b", "attached_rstudioapi"))
in_job$equal_sets(names(default_result), c(".call", "attached_correctly", "imported_correctly", "imported_a", "imported_b", "attached_rstudioapi"))
(.packages())
ls()
rm("a")
rm("b")
rm("default_result")
rm("in_job")
source('~/bitbucket/job/inst/tinytest/test_job.R', encoding = 'UTF-8', echo=TRUE)
b
a = 123
b = list(a = a, goat = "baah")
b
b == b
identical(b, b)
ls()
# Helpers to be called inside the jobs
in_job = list()
in_job$equal_sets = function(x, y) {
all(x %in% y) & all(y %in% x)
}
in_job$vars = c("in_job", "importnames__", "wd__")
in_job$packages = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base")
#########################
# TEST DEFAULT BEHAVIOR #
#########################
job::job(default_result = {
vars = ls()
pkgs = .packages()
a_copy = a
b_copy = b
attached_rstudioapi = exists("isAvailable")
})
# Result is not returned immediately
expect_true(exists("default_result") == FALSE)
expect_true(in_job$equal_sets(default_result$vars, c("a", "b", in_job$vars)))
expect_true(in_job$equal_sets(default_result$pkgs, c("job", "rstudioapi", "tinytest", in_job$packages)))
expect_identical(default_result$a_copy, a)
expect_identical(default_result$b_copy, b)
expect_true(default_result$attached_rstudioapi)
expect_true(in_job$equal_sets(names(default_result), c(".call", "vars", "pkgs", "a_copy", "b_copy", "attached_rstudioapi")))
rm(default_result)
ls()
ls()
#############
# TEST ARGS #
#############
returned = job::job(with_args = {
vars = ls()
pkgs = .packages()
b_copy = b
attached_rstudioapi = exists("isAvailable")
}, import = c(b, in_job), packages = c("job"), title = "something weird: #/(¤")
# Result is not returned immediately
expect_true(exists("with_args") == FALSE)
# Result is not returned immediately
expect_true(exists("with_args") == FALSE)
expect_null(returned)
expect_true(in_job$equal_sets(with_args$vars, c("b", in_job$vars)))
expect_true(in_job$equal_sets(with_args$pkgs, c("job", in_job$base_packages)))
with_args$pkgs
c("job", in_job$base_packages)
in_job$base_packages
expect_true(in_job$equal_sets(with_args$pkgs, c("job", in_job$packages)))
expect_identical(with_args$b_copy, b)
expect_true(with_args$attached_rstudioapi == FALSE)
expect_true(in_job$equal_sets(names(with_args), c(".call", "attached_correctly", "imported_correctly", "imported_b", "attached_rstudioapi")))
names(with_args)
expect_true(in_job$equal_sets(names(with_args), c(".call", "vars", "pkgs", "b_copy", "attached_rstudioapi")))
rm(returned)
rm(with_args)
ls()
expect_true(in_job$equal_sets(blank_slate$vars, c("importnames__", "wd__")))
################
# TEST BLANK #
################
job::job(blank_slate = {
vars = ls()
pkgs = .packages()
}, import = NULL, packages = NULL)
expect_true(in_job$equal_sets(blank_slate$vars, c("importnames__", "wd__")))
expect_true(in_job$equal_sets(blank_slate$pkgs, in_job$packages))
rm(blank_slate)
attached_start = ls()
job::job({
a = 1
}, import = NULL, packages = NULL)  # for speed
expect_true(in_job$equal_sets(c(attached_start, "attached_start"), ls()))
rm(attached_start)
############
# CLEAN UP #
############
rm(list = c("a", "b", "in_job"))
source('~/bitbucket/job/inst/tinytest/test_job.R', encoding = 'UTF-8', echo=TRUE)
tinytest::test_all()
devtools::load_all(".")
devtools::build()
devtools::check()
?object.size
?object.size
tinytest::test_all()
devtools::check()
tinytest::test_all()
job::job({devtools::test()})
job::job({tinytest::test_all()})
library(tinytest)
job::job({test_all()})
devtools::load_all(".")
