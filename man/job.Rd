% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/job.R
\encoding{UTF-8}
\name{job}
\alias{job}
\title{Run Code as an RStudio Job}
\usage{
job(..., import = ls(), packages = .packages(), opts = options(), title = NULL)
}
\arguments{
\item{...}{A named or unnamed code block. Named code blocks will have the result
assigned to that name in \code{globalenv()} upon completion. Unnamed code blocks
will not return anything. See examples.}

\item{import}{A vector of un-quoted variables to import into the job. E.g.,
\code{c(var1, var2)}. \code{ls()} (default) means "all" and \code{c()} is "nothing".}

\item{packages}{Character vector of packages to load in the job. Defaults to
all loaded packages in the calling environment. You can achieve the same
effect by writing \code{library(my_package)} in the code block.}

\item{opts}{List of options to overwrite in the job. Defaults to \code{options()},
i.e., copy all options to the job. \code{NULL} uses defaults.}

\item{title}{The job title. If \code{NULL} (default), use the name of \code{...} if set
or \code{"(untitled)"} if \code{...} is unnamed.}
}
\value{
\code{NULL}. But an environment is assigned if the code block argument is named.
The returned environment will include everything defined in the code block
but excluding - not "untouched" imports. See \code{...}.
}
\description{
See examples for an introduction. See details for some warnings.
}
\details{
This is a wrapper around \code{rstudioapi::jobRunScript}. Some tips:
\itemize{
\item \strong{Large objects:}\code{jobRunScript} is very
slow at importing and exporting large objects. Re importing, \code{as_job} does
sets \code{importEnv = FALSE} and passes data through a temporary .rds file.
Re exporting, I recommend saving large objects to an .rds file and \code{rm()} it
from the job so it isn't returned.
\item \strong{Deletes import-names:} Upon completion, all variables with names in \code{import}
are deleted to speed up return. Avoid assigning variable names that are imported.
}
}
\examples{
if (rstudioapi::isAvailable()) {
  # From globalenv
  global_var = 5
  job::job(result = {
    x = rnorm(global_var)
    print("This text goes to the job console")
    m = mean(x)
  })

  # later:
  print(as.list(result))


  # Run without assigning anything to the calling environment
  job::job({
    some_cars = mtcars[mtcars$cyl > 4, ]
    print(mean(some_cars$mpg))
    # saveRDS(some_cars, "job_result.rds")
  })


  # Specify imports and (no) packages
  my_df = data.frame(names = c("alice", "bob"))
  ignore_var = 15
  job::job(result2 = {
    if (exists("ignore_var") == FALSE)
      print("ignore_var is not set here")

    names = rep(my_df$names, global_var)
  }, import = c(global_var, my_df), packages = NULL)

  # later
  print(result2$names)
}
}
\seealso{
\code{\link[rstudioapi]{jobRunScript}}
}
\author{
Jonas Kristoffer Lindel√∏v, \email{jonas@lindeloev.dk}
}
